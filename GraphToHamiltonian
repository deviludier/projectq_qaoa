# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Graph To Hamiltonian Functions
#
# This file contains a few different functions to convert
# user-inputted graphs into hamiltonians for use in ProjectQ to then 
# feed into whatever algorithm you need a hamiltonian for, be it VQE
# or QAOA. 
#
# We will continue to add different cost/mixer hamiltonian functions
# for different problems
#
# Graphs must be given as a networkx graph
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


from projectq.ops import QubitOperator


# Creates the MaxCut cost hamiltonian given a graph
# Graph   ==>   ∑ 1/2(I - sigmaZ_i • sigmaZ_j)
def maxcut_cost_ham(graph):
  ham = QubitOperator('', 0.0)
  for i, j in graph.edges():
    operator_i = 'Z' + str(i)
    operator_j = 'Z' + str(j)
    ham += QubitOperator(operator_i + ' ' + operator_j, -0.5) + QubitOperator('', 0.5)
  return ham
  
# Creates the MaxCut mixer hamiltonian given a graph
# Graph  ==>  ∑ sigmaX_i
def maxcut_mixer_ham(graph):
  ham = QubitOperator('', 0.0)
  for i in graph.nodes():
    operator = 'X' + str(i)
    ham += QubitOperator(operator)
  return ham
    
    
